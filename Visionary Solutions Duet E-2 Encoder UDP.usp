/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:ASEI
System Name:
System Number:
Programmer:Pat Santucci
Comments: !ver#:0.0
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Visionary Solutions Duet E-2 Encoder UDP"
#HINT "Duet E-2 via UDP"
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "38" // Signal Routing
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
Controls Visionary Solutions Decoders using the X4K API 2.x.x.
Tested against DuetD-2 firmware 2.3.169

Inputs:

debug_enable: hold high to produce debugging messages on output "debug"

poll_video_output: pulse to get the state of the HDMI output (OFF, NORMAL, LOGO,
 or STANDBY)

poll_stream_host: pulse to get the IP address of the encoder from which the
current stream is sent
   
poll_video_detected: pulse to query the decoder for video timing of the incoming stream


video_output_off: sets the video output mode to OFF
video_output_normal: sets the video output mode to NORMAL
video_output_logo: sets the video output mode to LOGO
video_output_standby: sets the video output mode to STANDBY

Note that setting video_output_x does not necessarily produce the desired image on a
connected display. Video timout configuration can e.g. make the logo appear in normal
mode. All of these commands are automatically followed by a poll_video_output to update
feedback.

stream_host_ip: set to the valid IP address of an ecoder to connect the decoder to its
stream. Automatically followed by a poll_stream_host and poll_video_output to update
feedback. poll_video_output is needed because a change of host forces mode to NORMAL. 

cec_cmd: set to a sequence of CEC command bytes, represented as plain ASCII and colon
delimited, e.g. "10:04" for power on. This is the format used by cec-o-matic.com. 
For comparison, the same command from a serial send to a Crestron NVX device would be 
represented as raw hex bytes - "\x10\x04".

rx$: connect to the RX$ of a standard UDP/IP Communications control module on port 8000.


Outputs:

video_detected_fb: high when the incoming stream had valid video timimg at the last
poll, low if not.


video_output_off_fb: high when video output mode is OFF
video_output_normal_fb: high when video output mode is NORMAL
video_output_logo_fb: high when video output mode is LOGO
video_output_standby: high when video output mode is STANDBY

Note that setting video_output_x does not necessarily produce the desired image on a
connected display.

stream_host_ip_fb: reports the IP address of the last set host. Note that the video output
will only display the stream from this host if valid video is detected; it is entirely 
possible for this value to reflect the desired encoder and mode to be normal and still
see something else on the connected display.

debug: passes debugging messages while debug_enable is high.

tx$: connect to the TX$ of a standard UDP/IP Communications control module on port 8000. 
Note that UDP/IP may be connected to the IP address of a single decoder, or to the
multicast address 226.0.0.19. When set to multicast, all decoders in the domain will
execute the command. Feedback is not predictable for mutlticast use.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT
DIGITAL_INPUT debug_enable;
DIGITAL_INPUT poll_video_source;
DIGITAL_INPUT poll_audio_source;
DIGITAL_INPUT poll_video_detected;
DIGITAL_INPUT _SKIP_; 
DIGITAL_INPUT stream_audio_hdmi;
DIGITAL_INPUT stream_audio_analog;
DIGITAL_INPUT stream_audio_dante;
DIGITAL_INPUT stream_audio_bluetooth;
DIGITAL_INPUT stream_video_hdmi1;
DIGITAL_INPUT stream_video_hdmi2;
DIGITAL_INPUT stream_video_usbc;
DIGITAL_INPUT stream_video_auto;



 
// ANALOG_INPUT 
// STRING_INPUT 
// BUFFER_INPUT 
BUFFER_INPUT _SKIP_;
BUFFER_INPUT rx$[255];

// DIGITAL_OUTPUT
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT video_detected_fb; 
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT stream_audio_hdmi_fb;
DIGITAL_OUTPUT stream_audio_analog_fb;
DIGITAL_OUTPUT stream_audio_dante_fb;
DIGITAL_OUTPUT stream_audio_bluetooth_fb;
DIGITAL_OUTPUT stream_video_hdmi1_fb;
DIGITAL_OUTPUT stream_video_hdmi2_fb;
DIGITAL_OUTPUT stream_video_usbc_fb;
DIGITAL_OUTPUT stream_video_auto_fb;
// ANALOG_OUTPUT 
// STRING_OUTPUT 
STRING_OUTPUT debug;
STRING_OUTPUT tx$;
/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
INTEGER mode_fb_temp[7];

// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
STRING cmdHead$[32],cmdTail$[16];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

function sendCmd (string cmdBody$)
{
	makestring (tx$,"%s&%s&%s",cmdHead$,cmdBody$,cmdTail$);
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/
                

PUSH poll_audio_source
{
sendCmd("QUERY.KEY=STREAM.AUDIO");
}

PUSH poll_video_source
{
sendCmd("QUERY.KEY=STREAM.VIDEO");
}

PUSH poll_video_detected
{
sendCmd("QUERY.VIDEO_TIMING=TRUE");
}

PUSH stream_audio_hdmi
{
sendCmd("STREAM.AUDIO=HDMI"); 
sendCmd("QUERY.KEY=STREAM.AUDIO");
}
                
PUSH stream_audio_dante
{
sendCmd("STREAM.AUDIO=DANTE"); 
sendCmd("QUERY.KEY=STREAM.AUDIO");
}

PUSH stream_audio_analog
{
sendCmd("STREAM.AUDIO=ANALOG"); 
sendCmd("QUERY.KEY=STREAM.AUDIO");
}
                
PUSH stream_audio_bluetooth
{
sendCmd("STREAM.AUDIO=BT"); 
sendCmd("QUERY.KEY=STREAM.AUDIO");
}

PUSH stream_video_hdmi1
{
sendCmd("STREAM.VIDEO=HDMI1"); 
sendCmd("QUERY.KEY=STREAM.VIDEO");
}

PUSH stream_video_hdmi2
{
sendCmd("STREAM.VIDEO=HDMI2"); 
sendCmd("QUERY.KEY=STREAM.VIDEO");
}

PUSH stream_video_usbc
{
sendCmd("STREAM.VIDEO=USB-C"); 
sendCmd("QUERY.KEY=STREAM.VIDEO");
}

PUSH stream_video_auto
{
sendCmd("STREAM.VIDEO=AUTO"); 
sendCmd("QUERY.KEY=STREAM.VIDEO");
}
                
/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

THREADSAFE CHANGE rx$
{

	String tmpString[65534];
	String Chomp$[255];
//	integer loop;
 
	While(1) // This While(1) is OK 
	{ 
		Try // Prevents an exception from exiting the event 
		{ 
		tmpString = Gather("\x0A", rx$); //Gather keeps the priority high until delimiter is found 

		if (debug_enable=1)
				makestring(debug,"tmpString %s ", tmpString);

		// processing of tmpString
		if (FIND("&STREAM.VIDEO", tmpString)) //video mode message
			{
			stream_video_auto_fb = 0;
			stream_video_hdmi1_fb = 0;
			stream_video_hdmi2_fb = 0;
			stream_video_usbc_fb = 0;
			
			Chomp$ = REMOVE ("\x0A",tmpString);
			
			if (debug_enable=1)
				makestring(debug,"STREAM.VIDEO message %s ", Chomp$);
			
			if (find("=AUTO",Chomp$))// auto input
				{
				stream_video_auto_fb = 1;
				}
				else if (find("=HDMI1",Chomp$))// HDMI1
					{
					stream_video_hdmi1_fb = 1;
					}
					else if (find("=HDMI2",Chomp$))						{
						stream_video_hdmi2_fb = 1;
						}
						else if (find("=USB-C",Chomp$))
							{
							stream_video_usbc_fb = 1;
							}
			}
			
		if (FIND("&STREAM.AUDIO", tmpString)) //audio source message
			{
			
			Chomp$ = REMOVE ("\x0A",tmpString);

			stream_audio_hdmi_fb =0;
			stream_audio_dante_fb =0;
			stream_audio_analog_fb =0;
			stream_audio_bluetooth_fb =0;

			if (debug_enable=1)
				makestring(debug,"audio source message %s ", Chomp$);
			
			if (FIND("HDMI", Chomp$)) 
				{
				stream_audio_hdmi_fb = 1;
				}
				else if (find("=DANTE",Chomp$))					{
					stream_audio_dante_fb = 1;
					}	
					else if (find("=ANALOG",Chomp$))						{
						stream_audio_analog_fb = 1;
						}
						else if (find("=BT",Chomp$))
							{
							stream_audio_bluetooth_fb = 1;
							}
		}

		if (FIND("VIDEO.TIMING=Not Available", tmpString)) //audio source message
			{
			video_detected_fb=0;
			}

		if (FIND("VIDEO.TIMING=Timing Table", tmpString)) //audio source message
			{
			video_detected_fb=1;
			//opportunity for further parsing the table if real stats are desired post-install
			}
			
		tmpString = "";
		} 

 		Catch
		{
		} 
	}
	     
}



/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
    
	cmdHead$="CMD=START&UNIT.ID=ALL";
	cmdTail$="CMD=END";
}

