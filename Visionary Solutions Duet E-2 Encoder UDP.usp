/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:ASEI
System Name:
System Number:
Programmer:Pat Santucci
Comments: 
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Visionary Solutions Duet E-2 Encoder UDP"
#HINT "Duet E-2 Single unit control via UDP"
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "38" // Signal Routing
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT
DIGITAL_INPUT debug_enable;
DIGITAL_INPUT poll_video_source;
DIGITAL_INPUT poll_audio_source;
DIGITAL_INPUT poll_video_detected;
DIGITAL_INPUT _SKIP_; 
DIGITAL_INPUT stream_audio_hdmi;
DIGITAL_INPUT stream_audio_analog;
DIGITAL_INPUT stream_audio_dante;
DIGITAL_INPUT stream_audio_bluetooth;
DIGITAL_INPUT stream_video_hdmi1;
DIGITAL_INPUT stream_video_hdmi2;
DIGITAL_INPUT stream_video_usbc;
DIGITAL_INPUT stream_video_auto;



 
// ANALOG_INPUT 
// STRING_INPUT 
// BUFFER_INPUT 
BUFFER_INPUT _SKIP_;
BUFFER_INPUT rx$[255];

// DIGITAL_OUTPUT
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT video_detected_fb; 
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT stream_audio_hdmi_fb;
DIGITAL_OUTPUT stream_audio_analog_fb;
DIGITAL_OUTPUT stream_audio_dante_fb;
DIGITAL_OUTPUT stream_audio_bluetooth_fb;
DIGITAL_OUTPUT stream_video_hdmi1_fb;
DIGITAL_OUTPUT stream_video_hdmi2_fb;
DIGITAL_OUTPUT stream_video_usbc_fb;
DIGITAL_OUTPUT stream_video_auto_fb;
// ANALOG_OUTPUT 
// STRING_OUTPUT 
STRING_OUTPUT debug;
STRING_OUTPUT tx$;
/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
INTEGER mode_fb_temp[7];

// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
STRING cmdHead$[32],cmdTail$[16];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

function sendCmd (string cmdBody$)
{
	makestring (tx$,"%s&%s&%s",cmdHead$,cmdBody$,cmdTail$);
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/
                

PUSH poll_audio_source
{
sendCmd("QUERY.KEY=STREAM.AUDIO");
}

PUSH poll_video_source
{
sendCmd("QUERY.KEY=STREAM.VIDEO");
}

PUSH poll_video_detected
{
sendCmd("QUERY.VIDEO_TIMING=TRUE");
}

PUSH stream_audio_hdmi
{
sendCmd("STREAM.AUDIO=HDMI"); 
sendCmd("QUERY.KEY=STREAM.AUDIO");
}
                
PUSH stream_audio_dante
{
sendCmd("STREAM.AUDIO=DANTE"); 
sendCmd("QUERY.KEY=STREAM.AUDIO");
}

PUSH stream_audio_analog
{
sendCmd("STREAM.AUDIO=ANALOG"); 
sendCmd("QUERY.KEY=STREAM.AUDIO");
}
                
PUSH stream_audio_bluetooth
{
sendCmd("STREAM.AUDIO=BT"); 
sendCmd("QUERY.KEY=STREAM.AUDIO");
}

PUSH stream_video_hdmi1
{
sendCmd("STREAM.VIDEO=HDMI1"); 
sendCmd("QUERY.KEY=STREAM.VIDEO");
}

PUSH stream_video_hdmi2
{
sendCmd("STREAM.VIDEO=HDMI2"); 
sendCmd("QUERY.KEY=STREAM.VIDEO");
}

PUSH stream_video_usbc
{
sendCmd("STREAM.VIDEO=USB-C"); 
sendCmd("QUERY.KEY=STREAM.VIDEO");
}

PUSH stream_video_auto
{
sendCmd("STREAM.VIDEO=AUTO"); 
sendCmd("QUERY.KEY=STREAM.VIDEO");
}
                
/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

THREADSAFE CHANGE rx$
{

	String tmpString[65534];
	String Chomp$[255];
//	integer loop;
 
	While(1) // This While(1) is OK 
	{ 
		Try // Prevents an exception from exiting the event 
		{ 
		tmpString = Gather("\x0A", rx$); //Gather keeps the priority high until delimiter is found 

		if (debug_enable=1)
				makestring(debug,"tmpString %s ", tmpString);

		// processing of tmpString
		if (FIND("&STREAM.VIDEO", tmpString)) //video mode message
			{
			stream_video_auto_fb = 0;
			stream_video_hdmi1_fb = 0;
			stream_video_hdmi2_fb = 0;
			stream_video_usbc_fb = 0;
			
			Chomp$ = REMOVE ("\x0A",tmpString);
			
			if (debug_enable=1)
				makestring(debug,"STREAM.VIDEO message %s ", Chomp$);
			
			if (find("=AUTO",Chomp$))// auto input
				{
				stream_video_auto_fb = 1;
				}
				else if (find("=HDMI1",Chomp$))// HDMI1
					{
					stream_video_hdmi1_fb = 1;
					}
					else if (find("=HDMI2",Chomp$))						{
						stream_video_hdmi2_fb = 1;
						}
						else if (find("=USB-C",Chomp$))
							{
							stream_video_usbc_fb = 1;
							}
			}
			
		if (FIND("&STREAM.AUDIO", tmpString)) //audio source message
			{
			
			Chomp$ = REMOVE ("\x0A",tmpString);

			stream_audio_hdmi_fb =0;
			stream_audio_dante_fb =0;
			stream_audio_analog_fb =0;
			stream_audio_bluetooth_fb =0;

			if (debug_enable=1)
				makestring(debug,"audio source message %s ", Chomp$);
			
			if (FIND("HDMI", Chomp$)) 
				{
				stream_audio_hdmi_fb = 1;
				}
				else if (find("=DANTE",Chomp$))					{
					stream_audio_dante_fb = 1;
					}	
					else if (find("=ANALOG",Chomp$))						{
						stream_audio_analog_fb = 1;
						}
						else if (find("=BT",Chomp$))
							{
							stream_audio_bluetooth_fb = 1;
							}
		}

		if (FIND("VIDEO.TIMING=Not Available", tmpString)) //audio source message
			{
			video_detected_fb=0;
			}

		if (FIND("VIDEO.TIMING=Timing Table", tmpString)) //audio source message
			{
			video_detected_fb=1;
			//opportunity for further parsing the table if real stats are desired post-install
			}
			
		tmpString = "";
		} 

 		Catch
		{
		} 
	}
	     
}



/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
    
	cmdHead$="CMD=START&UNIT.ID=ALL";
	cmdTail$="CMD=END";
}

