/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:ASEI
System Name:
System Number:
Programmer:Pat Santucci
Comments: Change Made by BBB
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Visionary Solutions Duet E-2 Encoder UDP"
#HINT "Duet E-2 Single unit control via UDP"
// #DEFINE_CONSTANT
#DEFINE_CONSTANT PIP 5
#DEFINE_CONSTANT POP 6
#DEFINE_CONSTANT QUAD 7


// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT
DIGITAL_INPUT debug_enable;
DIGITAL_INPUT poll_mode;
DIGITAL_INPUT poll_encoder_audio_source;
DIGITAL_INPUT borders_all_on;
DIGITAL_INPUT borders_all_off;
DIGITAL_INPUT pip_mode_set;
DIGITAL_INPUT pap_mode_set;
DIGITAL_INPUT quad_mode_set;
DIGITAL_INPUT encoder_fullscreen_mode_set[4];
DIGITAL_INPUT encoder_audio_source_set[4];

 
// ANALOG_INPUT 
// STRING_INPUT 
// BUFFER_INPUT 
BUFFER_INPUT rx$[255];

// DIGITAL_OUTPUT
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT _SKIP_; 
DIGITAL_OUTPUT pip_mode_fb;
DIGITAL_OUTPUT pap_mode_fb;
DIGITAL_OUTPUT quad_mode_fb;
DIGITAL_OUTPUT encoder_fullscreen_mode_fb[4];
DIGITAL_OUTPUT encoder_audio_source_fb[4];
// ANALOG_OUTPUT 
// STRING_OUTPUT 
STRING_OUTPUT tx$;
STRING_OUTPUT debug;
/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
INTEGER mode_fb_temp[7];

// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
STRING cmdHead$[32],cmdTail$[16];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

function sendCmd (string cmdBody$)
{
	makestring (tx$,"%s&%s&%s",cmdHead$,cmdBody$,cmdTail$);
}


/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/
PUSH encoder_fullscreen_mode_set
{
string temp$[255];
temp$="STREAM.VIDEO=DECODER_" + itoa(GetLastModifiedArrayIndex());
sendCmd(temp$); 
}

PUSH pip_mode_set
{
sendCmd("STREAM.VIDEO=PIP"); 
}

PUSH pap_mode_set
{
sendCmd("STREAM.VIDEO=POP"); 
}

PUSH quad_mode_set
{
sendCmd("STREAM.VIDEO=QUAD"); 
}

PUSH encoder_fullscreen_mode_set
{
string temp$[255];
temp$="STREAM.AUDIO=DECODER_" + itoa(GetLastModifiedArrayIndex());
sendCmd(temp$); 
}

PUSH borders_all_on
{
sendCmd("MV.BORDER_ON=ALL|ALL");
}

PUSH borders_all_off
{
sendCmd("MV.BORDER_OFF=ALL|ALL");
}
                
PUSH poll_mode
{
sendCmd("QUERY.KEY=STREAM.VIDEO");
}

PUSH poll_encoder_audio_source
{
sendCmd("QUERY.KEY=STREAM.AUDIO");
}

PUSH encoder_audio_source_set
{
string temp$[255];
temp$="STREAM.AUDIO=DECODER_" + itoa(GetLastModifiedArrayIndex());
sendCmd(temp$); 
}
                
/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

THREADSAFE CHANGE rx$
{

	String tmpString[65534];
	String Chomp$[255];
	integer loop;
	integer which_fullscreen;
 
	While(1) // This While(1) is OK 
	{ 
		Try // Prevents an exception from exiting the event 
		{ 
		tmpString = Gather("\x0A", rx$); //Gather keeps the priority high until delimiter is found 
		// processing of tmpString
		if (FIND("&STREAM.VIDEO", tmpString)) //video mode message
			{
			for (loop = 1 to GetNumArrayCols (mode_fb_temp))
				{
				mode_fb_temp[loop]=0;
				}
				
			Chomp$ = REMOVE ("\x0A",tmpString);
			
			if (debug_enable=1)
				makestring(debug,"mode message %s ", Chomp$);
			
			if (find("DECODER_",Chomp$))// fullscreen single decoder
				{
				which_fullscreen = atoi (Chomp$);

				if (debug_enable=1)
					makestring(debug,"Found mode fullscreen DECODER %u", which_fullscreen);
					
				for (loop = 1 to GetNumArrayCols (mode_fb_temp))
					{
					if (loop = which_fullscreen)
						mode_fb_temp[loop]=1;
						else
							mode_fb_temp[loop]=0;
					}
				}
				else if (find("PIP",Chomp$))// picture in picture
					{
					mode_fb_temp[PIP] = 1;
					}
					else if (find("POP",Chomp$))// picture on picture / picture aside picture
						{
						mode_fb_temp[POP] = 1;
						}
						else if (find("QUAD",Chomp$))// picture on picture / picture aside picture
							{
							mode_fb_temp[QUAD] = 1;
							}

			for (loop = 1 to GetNumArrayCols (mode_fb_temp))
				{
				if ((loop > 0) && (loop < 5))
					{
					encoder_fullscreen_mode_fb[loop] = mode_fb_temp[loop];
					}	
					else if (loop = PIP)
						{
						pip_mode_fb = mode_fb_temp[loop];
						}
						else if (loop = POP)
							{
							pap_mode_fb = mode_fb_temp[loop];
							}
							else if (loop = QUAD)
								{
								quad_mode_fb = mode_fb_temp[loop];
								}
				}
			}
			
		if (FIND("&STREAM.AUDIO", tmpString)) //audio source message
			{
			Chomp$ = REMOVE ("\x0A",tmpString);
			if (debug_enable=1)
				makestring(debug,"audio source message %s ", Chomp$);
			
			if (FIND("DECODER_", Chomp$)) 
				{					
				for (loop = 1 to GetNumArrayCols (encoder_audio_source_fb))
					{
					if (loop = atoi (Chomp$))
						{
						encoder_audio_source_fb[loop] = 1;
						}
						else	
							{
							encoder_audio_source_fb[loop] = 0;
							}
					}
                }
			}
		
		tmpString = "";
		} 

 		Catch
		{
		} 
	}
	     
}



/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
    
	cmdHead$="CMD=START&UNIT.ID=ALL";
	cmdTail$="CMD=END";
}

